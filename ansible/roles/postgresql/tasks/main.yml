---
- name: Allow ssh traffic
  ufw:
    rule: allow
    port: "{{ ssh_port }}"
    proto: tcp

- name: Allow tcp traffic port 5432
  ufw:
    rule: allow
    from_ip: 16.171.234.2
    port: 5432
    proto: tcp

- name: Enable firewall
  ufw:
    state: enabled
    policy: deny
    direction: incoming

- name: "Install Postgresql dependencies"
  apt:
    name: ["bash", "openssl", "libssl-dev", "libssl-doc"]
    state: latest

- name: "Install Postgresql"
  apt:
    name: ["postgresql", "postgresql-contrib", "libpq-dev", "python3-psycopg2"]

- name: "Check if DB is initialized"
  ansible.builtin.stat:
    path: "/var/lib/pgsql/data/pg_hba.conf"
  register: postgres_data

- name: Start and enable the service
  ansible.builtin.systemd:
    name: postgresql
    state: started
    enabled: true

- name: Set options
  community.postgresql.postgresql_set:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
  become: true
  become_user: postgres
  loop: "{{ postgresql_options | default([]) }}"
  notify: Restart postgresql

- name: Create the databases
  community.postgresql.postgresql_db:
    name: "{{ item }}"
    encoding: "UTF-8"
  become: true
  become_user: postgres
  loop: "{{ postgresql_databases }}"

- name: Create the users
  community.postgresql.postgresql_user:
    db: "{{ item.db }}"
    name: "{{ item.name }}"
    password: "{{ item.password | default(omit) }}"
  become: true
  become_user: postgres
  environment:
    PGOPTIONS: "-c password_encryption=scram-sha-256"
  loop: "{{ postgresql_users }}"

- name: Create the schemas
  community.postgresql.postgresql_schema:
    db: "{{ item.db }}"
    name: "{{ item.name }}"
    owner: "{{ item.name }}"
  become: true
  become_user: postgres
  loop: "{{ postgresql_schemas }}"

- name: Set the user privileges
  community.postgresql.postgresql_privs:
    database: "{{ item.db }}"
    state: present
    objs: "{{ item.objs | default(omit) }}"
    privs: "{{ item.privs }}"
    type: "{{ item.type | default(omit) }}"
    roles: "{{ item.roles | default(omit) }}"
  become: true
  become_user: postgres
  loop: "{{ postgresql_privs | default([]) }}"

- name: Add entries to pg_hba
  community.postgresql.postgresql_pg_hba:
    dest: "/var/lib/pgsql/data/pg_hba.conf"
    address: "{{ item.address | default(omit) }}"
    contype: "{{ item.contype }}"
    databases: "{{ item.databases }}"
    method: "{{ item.method }}"
    users: "{{ item.users }}"
  become: true
  become_user: postgres
  loop: "{{ postgresql_hba_entries }}"
  notify: Restart postgresql

- name: Enable the HSTORE extension
  community.postgresql.postgresql_ext:
    name: "{{ item.name }}"
    db: "{{ item.db }}"
    state: present
  become: true
  become_user: postgres
  loop: "{{ postgresql_extensions | default([]) }}"
  notify: Restart postgresql

- name: Copy sample SQL file to remote server
  ansible.builtin.copy:
    src: sample.sql
    dest: /tmp/sample.sql
    owner: postgres
    group: postgres
    mode: '0644'

- name: Import sample SQL file into the database
  ansible.builtin.command: >
    psql -d {{ postgresql_sample_db }} -f /tmp/sample.sql
  become: true
  become_user: postgres
  when: postgresql_sample_db is defined
